import logging
import telebot
from django.conf import settings
from telebot import types

from av_project.av_backend.av_car.db_tg import *
from django.core.exceptions import ObjectDoesNotExist

bot = telebot.TeleBot(settings.TOKEN_BOT, parse_mode='HTML')
telebot.logger.setLevel(settings.LOG_LEVEL)

logger = logging.getLogger(__name__)


@bot.chat_member_handler()
def chat_member_handler_bot(message):  # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
    status = message.difference.get('status')
    invite_link = message.invite_link
    full_name = message.from_user.full_name
    username = message.from_user.username
    id = message.from_user.id
    invite_link_name = ''
    invite_link_url = ''
    channel_title = message.chat.title
    channel_username = message.chat.username
    try:
        invite_link_name = getattr(invite_link, 'name')
        invite_link_url = getattr(invite_link, 'invite_link')
    except AttributeError as err:
        print(f'–ù–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {err}')
        logger.info(f'–ù–µ –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {err}')
    current_subscriber_status = status[1]
    if current_subscriber_status == 'member':
        status_text = 'üöÄ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å'
    else:
        status_text = 'üòî –û—Ç–ø–∏—Å–∞–ª–∏—Å—å'
    text_message = (f'–°—Ç–∞—Ç—É—Å: {status_text}\n'
                    f'–ò–º—è: <b>{full_name}</b>\n'
                    f'ID: <b>{id}</b>\n'
                    f'–ö–∞–Ω–∞–ª: <b>{channel_title}</b>\n'
                    f'–°—Å—ã–ª–∫–∞ –∫–∞–Ω–∞–ª–∞: @{channel_username}')
    if username:
        text_message += f'\n–ù–∏–∫–Ω–µ–π–º: @{username}'
    if invite_link_name:
        text_message += f'\n–ò–º—è —Å—Å—ã–ª–∫–∏: {invite_link_name}'
    if invite_link_url:
        text_message += f'\n<b>URL</b>: {invite_link_url}'
    bot.send_message(chat_id=settings.TELEGRAM_ID_ADMIN, text=text_message)


# Handle '/start' and '/help'
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, """üöó""",)
    bot.send_message(message.chat.id, """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Av Car\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ <b>–ú–µ–Ω—é</b>""",)
    user_id = message.from_user.id
    username = f'@{message.from_user.username}'
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    return insert_tg(user_id, username, first_name, last_name)


@bot.message_handler(commands=['news'])
def news(message):
    try:
        links = get_all_links()
        if links:
            reply_markup = types.InlineKeyboardMarkup()
            for link in links:
                button = types.InlineKeyboardButton(text=link[0], url=link[1])
                reply_markup.add(button)
            bot.send_message(message.chat.id, "<b></b> üì∞")
            bot.send_message(message.chat.id, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ö–∞–Ω–∞–ª</b>", parse_mode='HTML', reply_markup=reply_markup)
        else:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start")


@bot.message_handler(commands=['ask'])
def ask_command(message):
    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì\n–ò –º–µ–Ω–µ–¥–∂–µ—Ä –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!")
    bot.register_next_step_handler(message, ask_message)


def ask_message(message):
    text = message.text
    chat_id = message.chat.id
    try:
        res = get_answer(chat=chat_id, message=text)
        existing_message = old_ask(chat=chat_id, message=text)
        new = new_ask(chat=chat_id, message=text)
        if existing_message:
            bot.send_message(chat_id, "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –∑–∞–¥–∞–Ω. –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
        elif res:
            bot.send_message(chat_id, f'–ù–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å (<b>{text}</b>) –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.')
            bot.send_message(chat_id, res)
        elif new:
            bot.send_message(chat_id, "–Ø –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä—É\n–û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    except Exception as err:
        bot.send_message(chat_id, f"–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞")


@bot.message_handler(commands=['site'])
def site(message):
    reply_markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –°–∞–π—Ç', url='https://av.by/')
    reply_markup.add(button)
    bot.send_message(message.from_user.id, "<b></b> üì∞", parse_mode='HTML', reply_markup=reply_markup)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, f'{message.from_user.first_name}\n–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –Ω–æ–º–µ—Ä—É:\n+375(29)111-11-11')
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)  # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–∏—Ç—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard.add(button_phone)
    bot.send_message(message.chat.id, '–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±\n–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –í–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç üì≤', reply_markup=keyboard)


@bot.message_handler(content_types=['contact'])
def contact(message):
    if message.contact is not None:
        get_contact(message)


@bot.message_handler(func=lambda message: True)
def echo_message(message):
    bot.reply_to(message, '–£–ø—Å –æ—à–∏–±–∫–∞ üòî')
